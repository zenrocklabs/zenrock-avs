// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractZrTaskManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IBLSSignatureCheckerNonSignerStakesAndSignature is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerNonSignerStakesAndSignature struct {
	NonSignerQuorumBitmapIndices []uint32
	NonSignerPubkeys             []BN254G1Point
	QuorumApks                   []BN254G1Point
	ApkG2                        BN254G2Point
	Sigma                        BN254G1Point
	QuorumApkIndices             []uint32
	TotalStakeIndices            []uint32
	NonSignerStakeIndices        [][]uint32
}

// IBLSSignatureCheckerQuorumStakeTotals is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerQuorumStakeTotals struct {
	SignedStakeForQuorum []*big.Int
	TotalStakeForQuorum  []*big.Int
}

// ZrServiceManagerLibTask is an auto generated low-level Go binding around an user-defined struct.
type ZrServiceManagerLibTask struct {
	TaskId                    uint32
	TaskCreatedBlock          uint32
	QuorumNumbers             []byte
	QuorumThresholdPercentage uint32
}

// ZrServiceManagerLibTaskResponse is an auto generated low-level Go binding around an user-defined struct.
type ZrServiceManagerLibTaskResponse struct {
	ReferenceTaskId    uint32
	InactiveSetZRChain []string
}

// ZrServiceManagerLibTaskResponseMetadata is an auto generated low-level Go binding around an user-defined struct.
type ZrServiceManagerLibTaskResponseMetadata struct {
	TaskResponsedBlock uint32
	HashOfNonSigners   [32]byte
}

// ContractZrTaskManagerMetaData contains all meta data concerning the ContractZrTaskManager contract.
var ContractZrTaskManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_registryCoordinator\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"TASK_CHALLENGE_WINDOW_BLOCK\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"blsApkRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIBLSApkRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkSignatures\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"referenceBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"params\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"components\":[{\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApks\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\",\"internalType\":\"uint32[][]\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.QuorumStakeTotals\",\"components\":[{\"name\":\"signedStakeForQuorum\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"},{\"name\":\"totalStakeForQuorum\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}]},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"createNewTask\",\"inputs\":[{\"name\":\"taskId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumThresholdPercentage\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTaskCreationBlock\",\"inputs\":[{\"name\":\"taskId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTaskNumber\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTaskResponse\",\"inputs\":[{\"name\":\"taskId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTaskResponseWindowBlock\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_aggregator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_generator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_taskResponseWindowBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"_zrServiceManager\",\"type\":\"address\",\"internalType\":\"contractIZrServiceManager\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"raiseAndResolveChallenge\",\"inputs\":[{\"name\":\"task\",\"type\":\"tuple\",\"internalType\":\"structZrServiceManagerLib.Task\",\"components\":[{\"name\":\"taskId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"taskCreatedBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"quorumThresholdPercentage\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"taskResponse\",\"type\":\"tuple\",\"internalType\":\"structZrServiceManagerLib.TaskResponse\",\"components\":[{\"name\":\"referenceTaskId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"inactiveSetZRChain\",\"type\":\"string[]\",\"internalType\":\"string[]\"}]},{\"name\":\"taskResponseMetadata\",\"type\":\"tuple\",\"internalType\":\"structZrServiceManagerLib.TaskResponseMetadata\",\"components\":[{\"name\":\"taskResponsedBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"hashOfNonSigners\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"pubkeysOfNonSigningOperators\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registryCoordinator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"respondToTask\",\"inputs\":[{\"name\":\"task\",\"type\":\"tuple\",\"internalType\":\"structZrServiceManagerLib.Task\",\"components\":[{\"name\":\"taskId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"taskCreatedBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"quorumThresholdPercentage\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"taskResponse\",\"type\":\"tuple\",\"internalType\":\"structZrServiceManagerLib.TaskResponse\",\"components\":[{\"name\":\"referenceTaskId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"inactiveSetZRChain\",\"type\":\"string[]\",\"internalType\":\"string[]\"}]},{\"name\":\"nonSignerStakesAndSignature\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"components\":[{\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApks\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\",\"internalType\":\"uint32[][]\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStaleStakesForbidden\",\"inputs\":[{\"name\":\"value\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stakeRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStakeRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"staleStakesForbidden\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"trySignatureAndApkVerification\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"apk\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"pairingSuccessful\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"siganatureIsValid\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NewTaskCreated\",\"inputs\":[{\"name\":\"taskId\",\"type\":\"uint32\",\"indexed\":true,\"internalType\":\"uint32\"},{\"name\":\"task\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structZrServiceManagerLib.Task\",\"components\":[{\"name\":\"taskId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"taskCreatedBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"quorumThresholdPercentage\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StaleStakesForbiddenUpdate\",\"inputs\":[{\"name\":\"value\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TaskChallengedSuccessfully\",\"inputs\":[{\"name\":\"taskId\",\"type\":\"uint32\",\"indexed\":true,\"internalType\":\"uint32\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TaskResponded\",\"inputs\":[{\"name\":\"response\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structZrServiceManagerLib.TaskResponse\",\"components\":[{\"name\":\"referenceTaskId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"inactiveSetZRChain\",\"type\":\"string[]\",\"internalType\":\"string[]\"}]},{\"name\":\"metadata\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structZrServiceManagerLib.TaskResponseMetadata\",\"components\":[{\"name\":\"taskResponsedBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"hashOfNonSigners\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ChallengePeriodExpired\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidNonSigners\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidQuorumNumbers\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidTask\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyAggregator\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyTaskGenerator\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TaskAlreadyChallenged\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TaskAlreadyResponded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TaskIdMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TaskNotResponded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TaskResponseMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TaskResponseTooLate\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ThresholdNotMet\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]}]",
	Bin: "0x6101006040523480156200001257600080fd5b5060405162003ed838038062003ed88339810160408190526200003591620002ac565b80806001600160a01b03166080816001600160a01b031681525050806001600160a01b031663683048356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200008f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b59190620002ac565b6001600160a01b031660a0816001600160a01b031681525050806001600160a01b0316635df459466040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200010d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001339190620002ac565b6001600160a01b031660c0816001600160a01b03168152505060a0516001600160a01b031663df5cf7236040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200018d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b39190620002ac565b6001600160a01b031660e05250620001ca620001d1565b50620002d3565b600054610100900460ff16156200023e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000291576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b0381168114620002a957600080fd5b50565b600060208284031215620002bf57600080fd5b8151620002cc8162000293565b9392505050565b60805160a05160c05160e051613b936200034560003960008181610313015261104601526000818161018d01526112280152600081816101cc015281816113fe01526115c00152600081816101f30152818161055e01528181610d3001528181610ea901526110e30152613b936000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80639d3a0f2d116100ad578063ed1f266811610071578063ed1f266814610335578063f2fde38b14610348578063f5c9899d1461035b578063f63c5bab14610376578063ffb3959f1461037f57600080fd5b80639d3a0f2d14610283578063aaee39a514610296578063b98d0908146102de578063caf73aa0146102fb578063df5cf7231461030e57600080fd5b80636d14a987116100f45780636d14a987146101ee5780636efb463614610215578063715018a6146102365780637b654c5d1461023e5780638da5cb5b1461027257600080fd5b8063171f1d5b14610131578063416c7e5e146101605780634c71c165146101755780635df459461461018857806368304835146101c7575b600080fd5b61014461013f366004612e29565b6103d2565b6040805192151583529015156020830152015b60405180910390f35b61017361016e366004612e7a565b61055c565b005b610173610183366004612f5d565b61069b565b6101af7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610157565b6101af7f000000000000000000000000000000000000000000000000000000000000000081565b6101af7f000000000000000000000000000000000000000000000000000000000000000081565b61022861022336600461325d565b61097b565b604051610157929190613327565b610173611875565b600080516020613b1e83398151915254640100000000900463ffffffff165b60405163ffffffff9091168152602001610157565b6033546001600160a01b03166101af565b610173610291366004613370565b611889565b61025d6102a43660046133d0565b63ffffffff90811660009081527f9e5d0bf83ef884a66a66b2d439fd65f5546f8f4489c6a744f987ecb90e5d710760205260409020541690565b6065546102eb9060ff1681565b6040519015158152602001610157565b6101736103093660046133f2565b611a6e565b6101af7f000000000000000000000000000000000000000000000000000000000000000081565b61017361034336600461348e565b611e5f565b6101736103563660046134e8565b6120a6565b600080516020613b1e8339815191525463ffffffff1661025d565b61025d61271081565b6103c461038d3660046133d0565b63ffffffff1660009081527f9e5d0bf83ef884a66a66b2d439fd65f5546f8f4489c6a744f987ecb90e5d7102602052604090205490565b604051908152602001610157565b60008060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018787600001518860200151886000015160006002811061041a5761041a613505565b60200201518951600160200201518a6020015160006002811061043f5761043f613505565b60200201518b6020015160016002811061045b5761045b613505565b602090810291909101518c518d8301516040516104b89a99989796959401988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b6040516020818303038152906040528051906020012060001c6104db919061351b565b905061054e6104f46104ed888461211c565b86906121ad565b6104fc612242565b6105446105358561052f604080518082018252600080825260209182015281518083019092526001825260029082015290565b9061211c565b61053e8c612302565b906121ad565b886201d4c0612391565b909890975095505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de919061353d565b6001600160a01b0316336001600160a01b03161461068f5760405162461bcd60e51b815260206004820152605c60248201527f424c535369676e6174757265436865636b65722e6f6e6c79436f6f7264696e6160448201527f746f724f776e65723a2063616c6c6572206973206e6f7420746865206f776e6560648201527f72206f6620746865207265676973747279436f6f7264696e61746f7200000000608482015260a4015b60405180910390fd5b610698816125b5565b50565b600080516020613b1e83398151915260006106b960208601866133d0565b63ffffffff811660009081526002840160205260409020549091506106f157604051635c18181d60e11b815260040160405180910390fd5b6000858560405160200161070692919061369b565b60408051601f19818403018152918152815160209283012063ffffffff8516600090815260028701909352912054909150811461075657604051633ac8ca7f60e21b815260040160405180910390fd5b63ffffffff8216600090815260038401602052604090205460ff161561078f5760405163f26e08d960e01b815260040160405180910390fd5b61271061079f60208701876133d0565b6107a991906136eb565b63ffffffff164363ffffffff1611156107d557604051637222b06b60e11b815260040160405180910390fd5b6107e260208701876133d0565b63ffffffff166107f560208901896133d0565b63ffffffff16146108195760405163cf4f8ffd60e01b815260040160405180910390fd5b600084516001600160401b0381111561083457610834612cd8565b60405190808252806020026020018201604052801561085d578160200160208202803683370190505b50905060005b85518110156108c5576108a086828151811061088157610881613505565b6020026020010151805160009081526020918201519091526040902090565b8282815181106108b2576108b2613505565b6020908102919091010152600101610863565b5060006108d860408a0160208b016133d0565b826040516020016108ea92919061370f565b6040516020818303038152906040528051906020012090508660200135811461092657604051633179278360e11b815260040160405180910390fd5b63ffffffff84166000818152600387016020526040808220805460ff19166001179055513392917fc20d1bb0f1623680306b83d4ff4bb99a2beb9d86d97832f3ca40fd13a29df1ec91a3505050505050505050565b604080518082019091526060808252602082015260008481036109f45760405162461bcd60e51b81526020600482015260376024820152600080516020613b3e83398151915260448201527f7265733a20656d7074792071756f72756d20696e7075740000000000000000006064820152608401610686565b60408301515185148015610a0c575060a08301515185145b8015610a1c575060c08301515185145b8015610a2c575060e08301515185145b610a965760405162461bcd60e51b81526020600482015260416024820152600080516020613b3e83398151915260448201527f7265733a20696e7075742071756f72756d206c656e677468206d69736d6174636064820152600d60fb1b608482015260a401610686565b82515160208401515114610b0e5760405162461bcd60e51b815260206004820152604460248201819052600080516020613b3e833981519152908201527f7265733a20696e707574206e6f6e7369676e6572206c656e677468206d69736d6064820152630c2e8c6d60e31b608482015260a401610686565b4363ffffffff168463ffffffff1610610b7d5760405162461bcd60e51b815260206004820152603c6024820152600080516020613b3e83398151915260448201527f7265733a20696e76616c6964207265666572656e636520626c6f636b000000006064820152608401610686565b6040805180820182526000808252602080830191909152825180840190935260608084529083015290866001600160401b03811115610bbe57610bbe612cd8565b604051908082528060200260200182016040528015610be7578160200160208202803683370190505b506020820152866001600160401b03811115610c0557610c05612cd8565b604051908082528060200260200182016040528015610c2e578160200160208202803683370190505b50815260408051808201909152606080825260208201528560200151516001600160401b03811115610c6257610c62612cd8565b604051908082528060200260200182016040528015610c8b578160200160208202803683370190505b5081526020860151516001600160401b03811115610cab57610cab612cd8565b604051908082528060200260200182016040528015610cd4578160200160208202803683370190505b5081602001819052506000610da68a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051639aa1653d60e01b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169350639aa1653d925060048083019260209291908290030181865afa158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da19190613757565b6125fc565b905060005b87602001515181101561102257610dd18860200151828151811061088157610881613505565b83602001518281518110610de757610de7613505565b60209081029190910101528015610ea7576020830151610e0860018361377a565b81518110610e1857610e18613505565b602002602001015160001c83602001518281518110610e3957610e39613505565b602002602001015160001c11610ea7576040805162461bcd60e51b8152602060048201526024810191909152600080516020613b3e83398151915260448201527f7265733a206e6f6e5369676e65725075626b657973206e6f7420736f727465646064820152608401610686565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166304ec635184602001518381518110610eec57610eec613505565b60200260200101518b8b600001518581518110610f0b57610f0b613505565b60200260200101516040518463ffffffff1660e01b8152600401610f489392919092835263ffffffff918216602084015216604082015260600190565b602060405180830381865afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f89919061378d565b6001600160c01b031683600001518281518110610fa857610fa8613505565b60200260200101818152505061100e6104ed610fe28486600001518581518110610fd457610fd4613505565b60200260200101511661268f565b8a602001518481518110610ff857610ff8613505565b60200260200101516126ba90919063ffffffff16565b94508061101a816137b6565b915050610dab565b505061102d8361279d565b60655490935060ff166000816110445760006110c6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c448feb86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c691906137cf565b905060005b8a811015611744578215611226578963ffffffff16827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663249a0c428f8f8681811061112257611122613505565b60405160e085901b6001600160e01b031916815292013560f81c600483015250602401602060405180830381865afa158015611162573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118691906137cf565b61119091906137e8565b116112265760405162461bcd60e51b81526020600482015260666024820152600080516020613b3e83398151915260448201527f7265733a205374616b6552656769737472792075706461746573206d7573742060648201527f62652077697468696e207769746864726177616c44656c6179426c6f636b732060848201526577696e646f7760d01b60a482015260c401610686565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166368bccaac8d8d8481811061126757611267613505565b9050013560f81c60f81b60f81c8c8c60a00151858151811061128b5761128b613505565b60209081029190910101516040516001600160e01b031960e086901b16815260ff909316600484015263ffffffff9182166024840152166044820152606401602060405180830381865afa1580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130b91906137fb565b6001600160401b03191661132e8a60400151838151811061088157610881613505565b67ffffffffffffffff1916146113ca5760405162461bcd60e51b81526020600482015260616024820152600080516020613b3e83398151915260448201527f7265733a2071756f72756d41706b206861736820696e2073746f72616765206460648201527f6f6573206e6f74206d617463682070726f76696465642071756f72756d2061706084820152606b60f81b60a482015260c401610686565b6113fa896040015182815181106113e3576113e3613505565b6020026020010151876121ad90919063ffffffff16565b95507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c8294c568d8d8481811061143d5761143d613505565b9050013560f81c60f81b60f81c8c8c60c00151858151811061146157611461613505565b60209081029190910101516040516001600160e01b031960e086901b16815260ff909316600484015263ffffffff9182166024840152166044820152606401602060405180830381865afa1580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e19190613826565b856020015182815181106114f7576114f7613505565b6001600160601b0390921660209283029190910182015285015180518290811061152357611523613505565b60200260200101518560000151828151811061154157611541613505565b60200260200101906001600160601b031690816001600160601b0316815250506000805b8a602001515181101561172f576115b98660000151828151811061158b5761158b613505565b60200260200101518f8f868181106115a5576115a5613505565b600192013560f81c9290921c811614919050565b1561171d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2be94ae8f8f868181106115ff576115ff613505565b9050013560f81c60f81b60f81c8e8960200151858151811061162357611623613505565b60200260200101518f60e00151888151811061164157611641613505565b6020026020010151878151811061165a5761165a613505565b60209081029190910101516040516001600160e01b031960e087901b16815260ff909416600485015263ffffffff92831660248501526044840191909152166064820152608401602060405180830381865afa1580156116be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e29190613826565b87518051859081106116f6576116f6613505565b6020026020010181815161170a919061384f565b6001600160601b03169052506001909101905b80611727816137b6565b915050611565565b5050808061173c906137b6565b9150506110cb565b50505060008061175e8c868a606001518b608001516103d2565b91509150816117cf5760405162461bcd60e51b81526020600482015260436024820152600080516020613b3e83398151915260448201527f7265733a2070616972696e6720707265636f6d70696c652063616c6c206661696064820152621b195960ea1b608482015260a401610686565b806118305760405162461bcd60e51b81526020600482015260396024820152600080516020613b3e83398151915260448201527f7265733a207369676e617475726520697320696e76616c6964000000000000006064820152608401610686565b5050600087826020015160405160200161184b92919061370f565b60408051808303601f190181529190528051602090910120929b929a509198505050505050505050565b61187d612838565b6118876000612892565b565b600080516020613b1e833981519152600501546001600160a01b031633146118c457604051630260262160e61b815260040160405180910390fd5b60008190036118e65760405163459637c760e11b815260040160405180910390fd5b6000600080516020613b1e8339815191529050600060405180608001604052808763ffffffff1681526020014363ffffffff16815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525063ffffffff871660209182015260405161197292910161386f565b60408051808303601f19018152828252805160209182012063ffffffff8a81166000818152600189018552858120849055600789018552859020805463ffffffff1916439093169283179055875467ffffffff0000000019166401000000008202178855608086018552808652838601919091528351601f89018490048402810184018552888152919550937ff31388a74ee5033e008e2f1789f853591ac3bb7c976ec29b94bdcc9fd46a7ca59390929083019190899089908190840183828082843760009201919091525050509082525063ffffffff8916602090910152604051611a5e919061386f565b60405180910390a2505050505050565b600080516020613b1e833981519152600401546001600160a01b03163314611aa9576040516374ec14c960e11b815260040160405180910390fd5b600080516020613b1e8339815191527f9e5d0bf83ef884a66a66b2d439fd65f5546f8f4489c6a744f987ecb90e5d71016000611ae860208701876133d0565b63ffffffff1663ffffffff1681526020019081526020016000205484604051602001611b1491906138f5565b6040516020818303038152906040528051906020012014611b4857604051630531bbb160e01b815260040160405180910390fd5b60006002820181611b5c60208801886133d0565b63ffffffff1663ffffffff1681526020019081526020016000205414611b955760405163f653f31160e01b815260040160405180910390fd5b805463ffffffff16611bad60408601602087016133d0565b611bb791906136eb565b63ffffffff164363ffffffff161115611be3576040516327ab279d60e21b815260040160405180910390fd5b600083604051602001611bf69190613966565b604051602081830303815290604052805190602001209050600080611c3b83888060400190611c259190613979565b611c3560408c0160208d016133d0565b8961097b565b9150915060005b611c4f6040890189613979565b9050811015611cf657611c686080890160608a016133d0565b60ff1683602001518281518110611c8157611c81613505565b6020026020010151611c9391906139bf565b6001600160601b0316604384600001518381518110611cb457611cb4613505565b60200260200101516001600160601b0316611ccf91906139e2565b1015611cee576040516359fa4a9360e01b815260040160405180910390fd5b600101611c42565b506000611d0660208801886139f9565b90501115611d7e5760068401546001600160a01b031663c63e3c50611d2e60208901896139f9565b6040518363ffffffff1660e01b8152600401611d4b929190613a42565b600060405180830381600087803b158015611d6557600080fd5b505af1158015611d79573d6000803e3d6000fd5b505050505b600060405180604001604052804363ffffffff16815260200183815250905060008782604051602001611db2929190613a5e565b604051602081830303815290604052805190602001209050808660020160008b6000016020810190611de491906133d0565b63ffffffff16815260208082019290925260409081016000908120939093558383526008890190915290819020805460ff19166001179055517fb3d0a4ff7bf22dfcf9cb480d1e535911448d11b47a0fa850ff82f39bf3ce356790611e4c908a908590613a5e565b60405180910390a1505050505050505050565b600054610100900460ff1615808015611e7f5750600054600160ff909116105b80611e995750303b158015611e99575060005460ff166001145b611efc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610686565b6000805460ff191660011790558015611f1f576000805461ff0019166101001790555b6001600160a01b038516611f465760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038416611f6d5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038216611f945760405163d92e233d60e01b815260040160405180910390fd5b611f9c6128e4565b7f9e5d0bf83ef884a66a66b2d439fd65f5546f8f4489c6a744f987ecb90e5d710480546001600160a01b03199081166001600160a01b03888116919091179092557f9e5d0bf83ef884a66a66b2d439fd65f5546f8f4489c6a744f987ecb90e5d710580548216878416179055600080516020613b1e833981519152805463ffffffff191663ffffffff87161790557f9e5d0bf83ef884a66a66b2d439fd65f5546f8f4489c6a744f987ecb90e5d71068054909116918416919091179055801561209f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6120ae612838565b6001600160a01b0381166121135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610686565b61069881612892565b6040805180820190915260008082526020820152612138612bfe565b835181526020808501519082015260408082018490526000908360608460076107d05a03fa9050808061216757fe5b50806121a55760405162461bcd60e51b815260206004820152600d60248201526c1958cb5b5d5b0b59985a5b1959609a1b6044820152606401610686565b505092915050565b60408051808201909152600080825260208201526121c9612c1c565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa9050808061220457fe5b50806121a55760405162461bcd60e51b815260206004820152600d60248201526c1958cb5859190b59985a5b1959609a1b6044820152606401610686565b61224a612c3a565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b604080518082019091526000808252602082015260008080612332600080516020613afe8339815191528661351b565b90505b61233e81612913565b9093509150600080516020613afe8339815191528283098303612377576040805180820190915290815260208101919091529392505050565b600080516020613afe833981519152600182089050612335565b6040805180820182528681526020808201869052825180840190935286835282018490526000918291906123c3612c5f565b60005b60028110156125885760006123dc8260066139e2565b90508482600281106123f0576123f0613505565b602002015151836124028360006137e8565b600c811061241257612412613505565b602002015284826002811061242957612429613505565b6020020151602001518382600161244091906137e8565b600c811061245057612450613505565b602002015283826002811061246757612467613505565b602002015151518361247a8360026137e8565b600c811061248a5761248a613505565b60200201528382600281106124a1576124a1613505565b60200201515160016020020151836124ba8360036137e8565b600c81106124ca576124ca613505565b60200201528382600281106124e1576124e1613505565b6020020151602001516000600281106124fc576124fc613505565b60200201518361250d8360046137e8565b600c811061251d5761251d613505565b602002015283826002811061253457612534613505565b60200201516020015160016002811061254f5761254f613505565b6020020151836125608360056137e8565b600c811061257057612570613505565b60200201525080612580816137b6565b9150506123c6565b50612591612c7e565b60006020826101808560088cfa9151919c9115159b50909950505050505050505050565b6065805460ff19168215159081179091556040519081527f40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc9060200160405180910390a150565b60008061260884612995565b9050808360ff166001901b116126865760405162461bcd60e51b815260206004820152603f60248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206269746d61702065786365656473206d61782076616c7565006064820152608401610686565b90505b92915050565b6000805b8215612689576126a460018461377a565b90921691806126b281613a91565b915050612693565b60408051808201909152600080825260208201526102008261ffff16106127165760405162461bcd60e51b815260206004820152601060248201526f7363616c61722d746f6f2d6c6172676560801b6044820152606401610686565b8161ffff16600103612729575081612689565b6040805180820190915260008082526020820181905284906001905b8161ffff168661ffff161061279257600161ffff871660ff83161c811690036127755761277284846121ad565b93505b61277f83846121ad565b92506201fffe600192831b169101612745565b509195945050505050565b604080518082019091526000808252602082015281511580156127c257506020820151155b156127e0575050604080518082019091526000808252602082015290565b604051806040016040528083600001518152602001600080516020613afe8339815191528460200151612813919061351b565b61282b90600080516020613afe83398151915261377a565b905292915050565b919050565b6033546001600160a01b031633146118875760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610686565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661290b5760405162461bcd60e51b815260040161068690613ab2565b611887612b25565b60008080600080516020613afe8339815191526003600080516020613afe83398151915286600080516020613afe833981519152888909090890506000612989827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52600080516020613afe833981519152612b55565b91959194509092505050565b600061010082511115612a1e5760405162461bcd60e51b8152602060048201526044602482018190527f4269746d61705574696c732e6f72646572656442797465734172726179546f42908201527f69746d61703a206f7264657265644279746573417272617920697320746f6f206064820152636c6f6e6760e01b608482015260a401610686565b8151600003612a2f57506000919050565b60008083600081518110612a4557612a45613505565b0160200151600160f89190911c81901b92505b8451811015612b1c57848181518110612a7357612a73613505565b0160200151600160f89190911c1b9150828211612b085760405162461bcd60e51b815260206004820152604760248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206f72646572656442797465734172726179206973206e6f74206064820152661bdc99195c995960ca1b608482015260a401610686565b91811791612b15816137b6565b9050612a58565b50909392505050565b600054610100900460ff16612b4c5760405162461bcd60e51b815260040161068690613ab2565b61188733612892565b600080612b60612c7e565b612b68612c9c565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa92508280612ba557fe5b5082612bf35760405162461bcd60e51b815260206004820152601a60248201527f424e3235342e6578704d6f643a2063616c6c206661696c7572650000000000006044820152606401610686565b505195945050505050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518060400160405280612c4d612cba565b8152602001612c5a612cba565b905290565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612d1057612d10612cd8565b60405290565b60405161010081016001600160401b0381118282101715612d1057612d10612cd8565b604051601f8201601f191681016001600160401b0381118282101715612d6157612d61612cd8565b604052919050565b600060408284031215612d7b57600080fd5b612d83612cee565b9050813581526020820135602082015292915050565b600082601f830112612daa57600080fd5b612db2612cee565b806040840185811115612dc457600080fd5b845b81811015612dde578035845260209384019301612dc6565b509095945050505050565b600060808284031215612dfb57600080fd5b612e03612cee565b9050612e0f8383612d99565b8152612e1e8360408401612d99565b602082015292915050565b6000806000806101208587031215612e4057600080fd5b84359350612e518660208701612d69565b9250612e608660608701612de9565b9150612e6f8660e08701612d69565b905092959194509250565b600060208284031215612e8c57600080fd5b8135801515811461268657600080fd5b600060808284031215612eae57600080fd5b50919050565b600060408284031215612eae57600080fd5b60006001600160401b03821115612edf57612edf612cd8565b5060051b60200190565b600082601f830112612efa57600080fd5b81356020612f0f612f0a83612ec6565b612d39565b82815260069290921b84018101918181019086841115612f2e57600080fd5b8286015b84811015612f5257612f448882612d69565b835291830191604001612f32565b509695505050505050565b60008060008060a08587031215612f7357600080fd5b84356001600160401b0380821115612f8a57600080fd5b612f9688838901612e9c565b95506020870135915080821115612fac57600080fd5b612fb888838901612eb4565b9450612fc78860408901612eb4565b93506080870135915080821115612fdd57600080fd5b50612fea87828801612ee9565b91505092959194509250565b60008083601f84011261300857600080fd5b5081356001600160401b0381111561301f57600080fd5b60208301915083602082850101111561303757600080fd5b9250929050565b803563ffffffff8116811461283357600080fd5b600082601f83011261306357600080fd5b81356020613073612f0a83612ec6565b82815260059290921b8401810191818101908684111561309257600080fd5b8286015b84811015612f52576130a78161303e565b8352918301918301613096565b600082601f8301126130c557600080fd5b813560206130d5612f0a83612ec6565b82815260059290921b840181019181810190868411156130f457600080fd5b8286015b84811015612f525780356001600160401b038111156131175760008081fd5b6131258986838b0101613052565b8452509183019183016130f8565b6000610180828403121561314657600080fd5b61314e612d16565b905081356001600160401b038082111561316757600080fd5b61317385838601613052565b8352602084013591508082111561318957600080fd5b61319585838601612ee9565b602084015260408401359150808211156131ae57600080fd5b6131ba85838601612ee9565b60408401526131cc8560608601612de9565b60608401526131de8560e08601612d69565b60808401526101208401359150808211156131f857600080fd5b61320485838601613052565b60a084015261014084013591508082111561321e57600080fd5b61322a85838601613052565b60c084015261016084013591508082111561324457600080fd5b50613251848285016130b4565b60e08301525092915050565b60008060008060006080868803121561327557600080fd5b8535945060208601356001600160401b038082111561329357600080fd5b61329f89838a01612ff6565b90965094508491506132b36040890161303e565b935060608801359150808211156132c957600080fd5b506132d688828901613133565b9150509295509295909350565b600081518084526020808501945080840160005b8381101561331c5781516001600160601b0316875295820195908201906001016132f7565b509495945050505050565b604081526000835160408084015261334260808401826132e3565b90506020850151603f1984830301606085015261335f82826132e3565b925050508260208301529392505050565b6000806000806060858703121561338657600080fd5b61338f8561303e565b935061339d6020860161303e565b925060408501356001600160401b038111156133b857600080fd5b6133c487828801612ff6565b95989497509550505050565b6000602082840312156133e257600080fd5b6133eb8261303e565b9392505050565b60008060006060848603121561340757600080fd5b83356001600160401b038082111561341e57600080fd5b61342a87838801612e9c565b9450602086013591508082111561344057600080fd5b61344c87838801612eb4565b9350604086013591508082111561346257600080fd5b5061346f86828701613133565b9150509250925092565b6001600160a01b038116811461069857600080fd5b600080600080608085870312156134a457600080fd5b84356134af81613479565b935060208501356134bf81613479565b92506134cd6040860161303e565b915060608501356134dd81613479565b939692955090935050565b6000602082840312156134fa57600080fd5b813561268681613479565b634e487b7160e01b600052603260045260246000fd5b60008261353857634e487b7160e01b600052601260045260246000fd5b500690565b60006020828403121561354f57600080fd5b815161268681613479565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e1984360301811261359a57600080fd5b83016020810192503590506001600160401b038111156135b957600080fd5b80360382131561303757600080fd5b81835260006020808501808196508560051b810191508460005b878110156136185782840389526135f98288613583565b61360486828461355a565b9a87019a95505050908401906001016135e2565b5091979650505050505050565b63ffffffff6136338261303e565b16825260006020820135601e1983360301811261364f57600080fd5b82016020810190356001600160401b0381111561366b57600080fd5b8060051b360382131561367d57600080fd5b604060208601526136926040860182846135c8565b95945050505050565b6060815260006136ae6060830185613625565b905063ffffffff6136be8461303e565b166020830152602083013560408301529392505050565b634e487b7160e01b600052601160045260246000fd5b63ffffffff818116838216019080821115613708576137086136d5565b5092915050565b63ffffffff60e01b8360e01b1681526000600482018351602080860160005b8381101561374a5781518552938201939082019060010161372e565b5092979650505050505050565b60006020828403121561376957600080fd5b815160ff8116811461268657600080fd5b81810381811115612689576126896136d5565b60006020828403121561379f57600080fd5b81516001600160c01b038116811461268657600080fd5b6000600182016137c8576137c86136d5565b5060010190565b6000602082840312156137e157600080fd5b5051919050565b80820180821115612689576126896136d5565b60006020828403121561380d57600080fd5b815167ffffffffffffffff198116811461268657600080fd5b60006020828403121561383857600080fd5b81516001600160601b038116811461268657600080fd5b6001600160601b03828116828216039080821115613708576137086136d5565b6000602080835263ffffffff808551168285015280828601511660408501525060408401516080606085015280518060a086015260005b818110156138c25782810184015186820160c0015283016138a6565b50600085820160c00152606086015163ffffffff811660808701529250601f01601f19169390930160c001949350505050565b60208152600063ffffffff8061390a8561303e565b1660208401528061391d6020860161303e565b1660408401526139306040850185613583565b6080606086015261394560a08601828461355a565b915050816139556060870161303e565b166080850152809250505092915050565b6020815260006133eb6020830184613625565b6000808335601e1984360301811261399057600080fd5b8301803591506001600160401b038211156139aa57600080fd5b60200191503681900382131561303757600080fd5b6001600160601b038181168382160280821691908281146121a5576121a56136d5565b8082028115828204841417612689576126896136d5565b6000808335601e19843603018112613a1057600080fd5b8301803591506001600160401b03821115613a2a57600080fd5b6020019150600581901b360382131561303757600080fd5b602081526000613a566020830184866135c8565b949350505050565b606081526000613a716060830185613625565b905063ffffffff8351166020830152602083015160408301529392505050565b600061ffff808316818103613aa857613aa86136d5565b6001019392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479e5d0bf83ef884a66a66b2d439fd65f5546f8f4489c6a744f987ecb90e5d7100424c535369676e6174757265436865636b65722e636865636b5369676e617475a2646970667358221220c89fb44677e0b73b2ec1aef9bed34845aecb8b4c2364a1eb9caced56a4c716f364736f6c63430008150033",
}

// ContractZrTaskManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractZrTaskManagerMetaData.ABI instead.
var ContractZrTaskManagerABI = ContractZrTaskManagerMetaData.ABI

// ContractZrTaskManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractZrTaskManagerMetaData.Bin instead.
var ContractZrTaskManagerBin = ContractZrTaskManagerMetaData.Bin

// DeployContractZrTaskManager deploys a new Ethereum contract, binding an instance of ContractZrTaskManager to it.
func DeployContractZrTaskManager(auth *bind.TransactOpts, backend bind.ContractBackend, _registryCoordinator common.Address) (common.Address, *types.Transaction, *ContractZrTaskManager, error) {
	parsed, err := ContractZrTaskManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractZrTaskManagerBin), backend, _registryCoordinator)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractZrTaskManager{ContractZrTaskManagerCaller: ContractZrTaskManagerCaller{contract: contract}, ContractZrTaskManagerTransactor: ContractZrTaskManagerTransactor{contract: contract}, ContractZrTaskManagerFilterer: ContractZrTaskManagerFilterer{contract: contract}}, nil
}

// ContractZrTaskManager is an auto generated Go binding around an Ethereum contract.
type ContractZrTaskManager struct {
	ContractZrTaskManagerCaller     // Read-only binding to the contract
	ContractZrTaskManagerTransactor // Write-only binding to the contract
	ContractZrTaskManagerFilterer   // Log filterer for contract events
}

// ContractZrTaskManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractZrTaskManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractZrTaskManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractZrTaskManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractZrTaskManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractZrTaskManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractZrTaskManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractZrTaskManagerSession struct {
	Contract     *ContractZrTaskManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ContractZrTaskManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractZrTaskManagerCallerSession struct {
	Contract *ContractZrTaskManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ContractZrTaskManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractZrTaskManagerTransactorSession struct {
	Contract     *ContractZrTaskManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ContractZrTaskManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractZrTaskManagerRaw struct {
	Contract *ContractZrTaskManager // Generic contract binding to access the raw methods on
}

// ContractZrTaskManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractZrTaskManagerCallerRaw struct {
	Contract *ContractZrTaskManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ContractZrTaskManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractZrTaskManagerTransactorRaw struct {
	Contract *ContractZrTaskManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractZrTaskManager creates a new instance of ContractZrTaskManager, bound to a specific deployed contract.
func NewContractZrTaskManager(address common.Address, backend bind.ContractBackend) (*ContractZrTaskManager, error) {
	contract, err := bindContractZrTaskManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractZrTaskManager{ContractZrTaskManagerCaller: ContractZrTaskManagerCaller{contract: contract}, ContractZrTaskManagerTransactor: ContractZrTaskManagerTransactor{contract: contract}, ContractZrTaskManagerFilterer: ContractZrTaskManagerFilterer{contract: contract}}, nil
}

// NewContractZrTaskManagerCaller creates a new read-only instance of ContractZrTaskManager, bound to a specific deployed contract.
func NewContractZrTaskManagerCaller(address common.Address, caller bind.ContractCaller) (*ContractZrTaskManagerCaller, error) {
	contract, err := bindContractZrTaskManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractZrTaskManagerCaller{contract: contract}, nil
}

// NewContractZrTaskManagerTransactor creates a new write-only instance of ContractZrTaskManager, bound to a specific deployed contract.
func NewContractZrTaskManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractZrTaskManagerTransactor, error) {
	contract, err := bindContractZrTaskManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractZrTaskManagerTransactor{contract: contract}, nil
}

// NewContractZrTaskManagerFilterer creates a new log filterer instance of ContractZrTaskManager, bound to a specific deployed contract.
func NewContractZrTaskManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractZrTaskManagerFilterer, error) {
	contract, err := bindContractZrTaskManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractZrTaskManagerFilterer{contract: contract}, nil
}

// bindContractZrTaskManager binds a generic wrapper to an already deployed contract.
func bindContractZrTaskManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractZrTaskManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractZrTaskManager *ContractZrTaskManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractZrTaskManager.Contract.ContractZrTaskManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractZrTaskManager *ContractZrTaskManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.ContractZrTaskManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractZrTaskManager *ContractZrTaskManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.ContractZrTaskManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractZrTaskManager *ContractZrTaskManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractZrTaskManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractZrTaskManager *ContractZrTaskManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractZrTaskManager *ContractZrTaskManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.contract.Transact(opts, method, params...)
}

// TASKCHALLENGEWINDOWBLOCK is a free data retrieval call binding the contract method 0xf63c5bab.
//
// Solidity: function TASK_CHALLENGE_WINDOW_BLOCK() view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) TASKCHALLENGEWINDOWBLOCK(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "TASK_CHALLENGE_WINDOW_BLOCK")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TASKCHALLENGEWINDOWBLOCK is a free data retrieval call binding the contract method 0xf63c5bab.
//
// Solidity: function TASK_CHALLENGE_WINDOW_BLOCK() view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) TASKCHALLENGEWINDOWBLOCK() (uint32, error) {
	return _ContractZrTaskManager.Contract.TASKCHALLENGEWINDOWBLOCK(&_ContractZrTaskManager.CallOpts)
}

// TASKCHALLENGEWINDOWBLOCK is a free data retrieval call binding the contract method 0xf63c5bab.
//
// Solidity: function TASK_CHALLENGE_WINDOW_BLOCK() view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) TASKCHALLENGEWINDOWBLOCK() (uint32, error) {
	return _ContractZrTaskManager.Contract.TASKCHALLENGEWINDOWBLOCK(&_ContractZrTaskManager.CallOpts)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) BlsApkRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "blsApkRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractZrTaskManager.Contract.BlsApkRegistry(&_ContractZrTaskManager.CallOpts)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractZrTaskManager.Contract.BlsApkRegistry(&_ContractZrTaskManager.CallOpts)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) CheckSignatures(opts *bind.CallOpts, msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "checkSignatures", msgHash, quorumNumbers, referenceBlockNumber, params)

	if err != nil {
		return *new(IBLSSignatureCheckerQuorumStakeTotals), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSSignatureCheckerQuorumStakeTotals)).(*IBLSSignatureCheckerQuorumStakeTotals)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractZrTaskManager.Contract.CheckSignatures(&_ContractZrTaskManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractZrTaskManager.Contract.CheckSignatures(&_ContractZrTaskManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) Delegation() (common.Address, error) {
	return _ContractZrTaskManager.Contract.Delegation(&_ContractZrTaskManager.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) Delegation() (common.Address, error) {
	return _ContractZrTaskManager.Contract.Delegation(&_ContractZrTaskManager.CallOpts)
}

// GetTaskCreationBlock is a free data retrieval call binding the contract method 0xaaee39a5.
//
// Solidity: function getTaskCreationBlock(uint32 taskId) view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) GetTaskCreationBlock(opts *bind.CallOpts, taskId uint32) (uint32, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "getTaskCreationBlock", taskId)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetTaskCreationBlock is a free data retrieval call binding the contract method 0xaaee39a5.
//
// Solidity: function getTaskCreationBlock(uint32 taskId) view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) GetTaskCreationBlock(taskId uint32) (uint32, error) {
	return _ContractZrTaskManager.Contract.GetTaskCreationBlock(&_ContractZrTaskManager.CallOpts, taskId)
}

// GetTaskCreationBlock is a free data retrieval call binding the contract method 0xaaee39a5.
//
// Solidity: function getTaskCreationBlock(uint32 taskId) view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) GetTaskCreationBlock(taskId uint32) (uint32, error) {
	return _ContractZrTaskManager.Contract.GetTaskCreationBlock(&_ContractZrTaskManager.CallOpts, taskId)
}

// GetTaskNumber is a free data retrieval call binding the contract method 0x7b654c5d.
//
// Solidity: function getTaskNumber() view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) GetTaskNumber(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "getTaskNumber")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetTaskNumber is a free data retrieval call binding the contract method 0x7b654c5d.
//
// Solidity: function getTaskNumber() view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) GetTaskNumber() (uint32, error) {
	return _ContractZrTaskManager.Contract.GetTaskNumber(&_ContractZrTaskManager.CallOpts)
}

// GetTaskNumber is a free data retrieval call binding the contract method 0x7b654c5d.
//
// Solidity: function getTaskNumber() view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) GetTaskNumber() (uint32, error) {
	return _ContractZrTaskManager.Contract.GetTaskNumber(&_ContractZrTaskManager.CallOpts)
}

// GetTaskResponse is a free data retrieval call binding the contract method 0xffb3959f.
//
// Solidity: function getTaskResponse(uint32 taskId) view returns(bytes32)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) GetTaskResponse(opts *bind.CallOpts, taskId uint32) ([32]byte, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "getTaskResponse", taskId)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetTaskResponse is a free data retrieval call binding the contract method 0xffb3959f.
//
// Solidity: function getTaskResponse(uint32 taskId) view returns(bytes32)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) GetTaskResponse(taskId uint32) ([32]byte, error) {
	return _ContractZrTaskManager.Contract.GetTaskResponse(&_ContractZrTaskManager.CallOpts, taskId)
}

// GetTaskResponse is a free data retrieval call binding the contract method 0xffb3959f.
//
// Solidity: function getTaskResponse(uint32 taskId) view returns(bytes32)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) GetTaskResponse(taskId uint32) ([32]byte, error) {
	return _ContractZrTaskManager.Contract.GetTaskResponse(&_ContractZrTaskManager.CallOpts, taskId)
}

// GetTaskResponseWindowBlock is a free data retrieval call binding the contract method 0xf5c9899d.
//
// Solidity: function getTaskResponseWindowBlock() view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) GetTaskResponseWindowBlock(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "getTaskResponseWindowBlock")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetTaskResponseWindowBlock is a free data retrieval call binding the contract method 0xf5c9899d.
//
// Solidity: function getTaskResponseWindowBlock() view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) GetTaskResponseWindowBlock() (uint32, error) {
	return _ContractZrTaskManager.Contract.GetTaskResponseWindowBlock(&_ContractZrTaskManager.CallOpts)
}

// GetTaskResponseWindowBlock is a free data retrieval call binding the contract method 0xf5c9899d.
//
// Solidity: function getTaskResponseWindowBlock() view returns(uint32)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) GetTaskResponseWindowBlock() (uint32, error) {
	return _ContractZrTaskManager.Contract.GetTaskResponseWindowBlock(&_ContractZrTaskManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) Owner() (common.Address, error) {
	return _ContractZrTaskManager.Contract.Owner(&_ContractZrTaskManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) Owner() (common.Address, error) {
	return _ContractZrTaskManager.Contract.Owner(&_ContractZrTaskManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractZrTaskManager.Contract.RegistryCoordinator(&_ContractZrTaskManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractZrTaskManager.Contract.RegistryCoordinator(&_ContractZrTaskManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) StakeRegistry() (common.Address, error) {
	return _ContractZrTaskManager.Contract.StakeRegistry(&_ContractZrTaskManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) StakeRegistry() (common.Address, error) {
	return _ContractZrTaskManager.Contract.StakeRegistry(&_ContractZrTaskManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) StaleStakesForbidden(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "staleStakesForbidden")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) StaleStakesForbidden() (bool, error) {
	return _ContractZrTaskManager.Contract.StaleStakesForbidden(&_ContractZrTaskManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) StaleStakesForbidden() (bool, error) {
	return _ContractZrTaskManager.Contract.StaleStakesForbidden(&_ContractZrTaskManager.CallOpts)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractZrTaskManager *ContractZrTaskManagerCaller) TrySignatureAndApkVerification(opts *bind.CallOpts, msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	var out []interface{}
	err := _ContractZrTaskManager.contract.Call(opts, &out, "trySignatureAndApkVerification", msgHash, apk, apkG2, sigma)

	outstruct := new(struct {
		PairingSuccessful bool
		SiganatureIsValid bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PairingSuccessful = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.SiganatureIsValid = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractZrTaskManager *ContractZrTaskManagerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractZrTaskManager.Contract.TrySignatureAndApkVerification(&_ContractZrTaskManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractZrTaskManager *ContractZrTaskManagerCallerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractZrTaskManager.Contract.TrySignatureAndApkVerification(&_ContractZrTaskManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// CreateNewTask is a paid mutator transaction binding the contract method 0x9d3a0f2d.
//
// Solidity: function createNewTask(uint32 taskId, uint32 quorumThresholdPercentage, bytes quorumNumbers) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactor) CreateNewTask(opts *bind.TransactOpts, taskId uint32, quorumThresholdPercentage uint32, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractZrTaskManager.contract.Transact(opts, "createNewTask", taskId, quorumThresholdPercentage, quorumNumbers)
}

// CreateNewTask is a paid mutator transaction binding the contract method 0x9d3a0f2d.
//
// Solidity: function createNewTask(uint32 taskId, uint32 quorumThresholdPercentage, bytes quorumNumbers) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerSession) CreateNewTask(taskId uint32, quorumThresholdPercentage uint32, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.CreateNewTask(&_ContractZrTaskManager.TransactOpts, taskId, quorumThresholdPercentage, quorumNumbers)
}

// CreateNewTask is a paid mutator transaction binding the contract method 0x9d3a0f2d.
//
// Solidity: function createNewTask(uint32 taskId, uint32 quorumThresholdPercentage, bytes quorumNumbers) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactorSession) CreateNewTask(taskId uint32, quorumThresholdPercentage uint32, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.CreateNewTask(&_ContractZrTaskManager.TransactOpts, taskId, quorumThresholdPercentage, quorumNumbers)
}

// Initialize is a paid mutator transaction binding the contract method 0xed1f2668.
//
// Solidity: function initialize(address _aggregator, address _generator, uint32 _taskResponseWindowBlock, address _zrServiceManager) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactor) Initialize(opts *bind.TransactOpts, _aggregator common.Address, _generator common.Address, _taskResponseWindowBlock uint32, _zrServiceManager common.Address) (*types.Transaction, error) {
	return _ContractZrTaskManager.contract.Transact(opts, "initialize", _aggregator, _generator, _taskResponseWindowBlock, _zrServiceManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xed1f2668.
//
// Solidity: function initialize(address _aggregator, address _generator, uint32 _taskResponseWindowBlock, address _zrServiceManager) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerSession) Initialize(_aggregator common.Address, _generator common.Address, _taskResponseWindowBlock uint32, _zrServiceManager common.Address) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.Initialize(&_ContractZrTaskManager.TransactOpts, _aggregator, _generator, _taskResponseWindowBlock, _zrServiceManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xed1f2668.
//
// Solidity: function initialize(address _aggregator, address _generator, uint32 _taskResponseWindowBlock, address _zrServiceManager) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactorSession) Initialize(_aggregator common.Address, _generator common.Address, _taskResponseWindowBlock uint32, _zrServiceManager common.Address) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.Initialize(&_ContractZrTaskManager.TransactOpts, _aggregator, _generator, _taskResponseWindowBlock, _zrServiceManager)
}

// RaiseAndResolveChallenge is a paid mutator transaction binding the contract method 0x4c71c165.
//
// Solidity: function raiseAndResolveChallenge((uint32,uint32,bytes,uint32) task, (uint32,string[]) taskResponse, (uint32,bytes32) taskResponseMetadata, (uint256,uint256)[] pubkeysOfNonSigningOperators) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactor) RaiseAndResolveChallenge(opts *bind.TransactOpts, task ZrServiceManagerLibTask, taskResponse ZrServiceManagerLibTaskResponse, taskResponseMetadata ZrServiceManagerLibTaskResponseMetadata, pubkeysOfNonSigningOperators []BN254G1Point) (*types.Transaction, error) {
	return _ContractZrTaskManager.contract.Transact(opts, "raiseAndResolveChallenge", task, taskResponse, taskResponseMetadata, pubkeysOfNonSigningOperators)
}

// RaiseAndResolveChallenge is a paid mutator transaction binding the contract method 0x4c71c165.
//
// Solidity: function raiseAndResolveChallenge((uint32,uint32,bytes,uint32) task, (uint32,string[]) taskResponse, (uint32,bytes32) taskResponseMetadata, (uint256,uint256)[] pubkeysOfNonSigningOperators) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerSession) RaiseAndResolveChallenge(task ZrServiceManagerLibTask, taskResponse ZrServiceManagerLibTaskResponse, taskResponseMetadata ZrServiceManagerLibTaskResponseMetadata, pubkeysOfNonSigningOperators []BN254G1Point) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.RaiseAndResolveChallenge(&_ContractZrTaskManager.TransactOpts, task, taskResponse, taskResponseMetadata, pubkeysOfNonSigningOperators)
}

// RaiseAndResolveChallenge is a paid mutator transaction binding the contract method 0x4c71c165.
//
// Solidity: function raiseAndResolveChallenge((uint32,uint32,bytes,uint32) task, (uint32,string[]) taskResponse, (uint32,bytes32) taskResponseMetadata, (uint256,uint256)[] pubkeysOfNonSigningOperators) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactorSession) RaiseAndResolveChallenge(task ZrServiceManagerLibTask, taskResponse ZrServiceManagerLibTaskResponse, taskResponseMetadata ZrServiceManagerLibTaskResponseMetadata, pubkeysOfNonSigningOperators []BN254G1Point) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.RaiseAndResolveChallenge(&_ContractZrTaskManager.TransactOpts, task, taskResponse, taskResponseMetadata, pubkeysOfNonSigningOperators)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractZrTaskManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractZrTaskManager *ContractZrTaskManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.RenounceOwnership(&_ContractZrTaskManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.RenounceOwnership(&_ContractZrTaskManager.TransactOpts)
}

// RespondToTask is a paid mutator transaction binding the contract method 0xcaf73aa0.
//
// Solidity: function respondToTask((uint32,uint32,bytes,uint32) task, (uint32,string[]) taskResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactor) RespondToTask(opts *bind.TransactOpts, task ZrServiceManagerLibTask, taskResponse ZrServiceManagerLibTaskResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractZrTaskManager.contract.Transact(opts, "respondToTask", task, taskResponse, nonSignerStakesAndSignature)
}

// RespondToTask is a paid mutator transaction binding the contract method 0xcaf73aa0.
//
// Solidity: function respondToTask((uint32,uint32,bytes,uint32) task, (uint32,string[]) taskResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerSession) RespondToTask(task ZrServiceManagerLibTask, taskResponse ZrServiceManagerLibTaskResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.RespondToTask(&_ContractZrTaskManager.TransactOpts, task, taskResponse, nonSignerStakesAndSignature)
}

// RespondToTask is a paid mutator transaction binding the contract method 0xcaf73aa0.
//
// Solidity: function respondToTask((uint32,uint32,bytes,uint32) task, (uint32,string[]) taskResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactorSession) RespondToTask(task ZrServiceManagerLibTask, taskResponse ZrServiceManagerLibTaskResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.RespondToTask(&_ContractZrTaskManager.TransactOpts, task, taskResponse, nonSignerStakesAndSignature)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactor) SetStaleStakesForbidden(opts *bind.TransactOpts, value bool) (*types.Transaction, error) {
	return _ContractZrTaskManager.contract.Transact(opts, "setStaleStakesForbidden", value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.SetStaleStakesForbidden(&_ContractZrTaskManager.TransactOpts, value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactorSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.SetStaleStakesForbidden(&_ContractZrTaskManager.TransactOpts, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractZrTaskManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.TransferOwnership(&_ContractZrTaskManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractZrTaskManager *ContractZrTaskManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractZrTaskManager.Contract.TransferOwnership(&_ContractZrTaskManager.TransactOpts, newOwner)
}

// ContractZrTaskManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerInitializedIterator struct {
	Event *ContractZrTaskManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractZrTaskManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractZrTaskManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractZrTaskManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractZrTaskManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractZrTaskManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractZrTaskManagerInitialized represents a Initialized event raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractZrTaskManagerInitializedIterator, error) {

	logs, sub, err := _ContractZrTaskManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractZrTaskManagerInitializedIterator{contract: _ContractZrTaskManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractZrTaskManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractZrTaskManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractZrTaskManagerInitialized)
				if err := _ContractZrTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) ParseInitialized(log types.Log) (*ContractZrTaskManagerInitialized, error) {
	event := new(ContractZrTaskManagerInitialized)
	if err := _ContractZrTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractZrTaskManagerNewTaskCreatedIterator is returned from FilterNewTaskCreated and is used to iterate over the raw logs and unpacked data for NewTaskCreated events raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerNewTaskCreatedIterator struct {
	Event *ContractZrTaskManagerNewTaskCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractZrTaskManagerNewTaskCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractZrTaskManagerNewTaskCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractZrTaskManagerNewTaskCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractZrTaskManagerNewTaskCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractZrTaskManagerNewTaskCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractZrTaskManagerNewTaskCreated represents a NewTaskCreated event raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerNewTaskCreated struct {
	TaskId uint32
	Task   ZrServiceManagerLibTask
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNewTaskCreated is a free log retrieval operation binding the contract event 0xf31388a74ee5033e008e2f1789f853591ac3bb7c976ec29b94bdcc9fd46a7ca5.
//
// Solidity: event NewTaskCreated(uint32 indexed taskId, (uint32,uint32,bytes,uint32) task)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) FilterNewTaskCreated(opts *bind.FilterOpts, taskId []uint32) (*ContractZrTaskManagerNewTaskCreatedIterator, error) {

	var taskIdRule []interface{}
	for _, taskIdItem := range taskId {
		taskIdRule = append(taskIdRule, taskIdItem)
	}

	logs, sub, err := _ContractZrTaskManager.contract.FilterLogs(opts, "NewTaskCreated", taskIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractZrTaskManagerNewTaskCreatedIterator{contract: _ContractZrTaskManager.contract, event: "NewTaskCreated", logs: logs, sub: sub}, nil
}

// WatchNewTaskCreated is a free log subscription operation binding the contract event 0xf31388a74ee5033e008e2f1789f853591ac3bb7c976ec29b94bdcc9fd46a7ca5.
//
// Solidity: event NewTaskCreated(uint32 indexed taskId, (uint32,uint32,bytes,uint32) task)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) WatchNewTaskCreated(opts *bind.WatchOpts, sink chan<- *ContractZrTaskManagerNewTaskCreated, taskId []uint32) (event.Subscription, error) {

	var taskIdRule []interface{}
	for _, taskIdItem := range taskId {
		taskIdRule = append(taskIdRule, taskIdItem)
	}

	logs, sub, err := _ContractZrTaskManager.contract.WatchLogs(opts, "NewTaskCreated", taskIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractZrTaskManagerNewTaskCreated)
				if err := _ContractZrTaskManager.contract.UnpackLog(event, "NewTaskCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewTaskCreated is a log parse operation binding the contract event 0xf31388a74ee5033e008e2f1789f853591ac3bb7c976ec29b94bdcc9fd46a7ca5.
//
// Solidity: event NewTaskCreated(uint32 indexed taskId, (uint32,uint32,bytes,uint32) task)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) ParseNewTaskCreated(log types.Log) (*ContractZrTaskManagerNewTaskCreated, error) {
	event := new(ContractZrTaskManagerNewTaskCreated)
	if err := _ContractZrTaskManager.contract.UnpackLog(event, "NewTaskCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractZrTaskManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerOwnershipTransferredIterator struct {
	Event *ContractZrTaskManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractZrTaskManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractZrTaskManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractZrTaskManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractZrTaskManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractZrTaskManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractZrTaskManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractZrTaskManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractZrTaskManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractZrTaskManagerOwnershipTransferredIterator{contract: _ContractZrTaskManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractZrTaskManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractZrTaskManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractZrTaskManagerOwnershipTransferred)
				if err := _ContractZrTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ContractZrTaskManagerOwnershipTransferred, error) {
	event := new(ContractZrTaskManagerOwnershipTransferred)
	if err := _ContractZrTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractZrTaskManagerStaleStakesForbiddenUpdateIterator is returned from FilterStaleStakesForbiddenUpdate and is used to iterate over the raw logs and unpacked data for StaleStakesForbiddenUpdate events raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerStaleStakesForbiddenUpdateIterator struct {
	Event *ContractZrTaskManagerStaleStakesForbiddenUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractZrTaskManagerStaleStakesForbiddenUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractZrTaskManagerStaleStakesForbiddenUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractZrTaskManagerStaleStakesForbiddenUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractZrTaskManagerStaleStakesForbiddenUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractZrTaskManagerStaleStakesForbiddenUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractZrTaskManagerStaleStakesForbiddenUpdate represents a StaleStakesForbiddenUpdate event raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerStaleStakesForbiddenUpdate struct {
	Value bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterStaleStakesForbiddenUpdate is a free log retrieval operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) FilterStaleStakesForbiddenUpdate(opts *bind.FilterOpts) (*ContractZrTaskManagerStaleStakesForbiddenUpdateIterator, error) {

	logs, sub, err := _ContractZrTaskManager.contract.FilterLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return &ContractZrTaskManagerStaleStakesForbiddenUpdateIterator{contract: _ContractZrTaskManager.contract, event: "StaleStakesForbiddenUpdate", logs: logs, sub: sub}, nil
}

// WatchStaleStakesForbiddenUpdate is a free log subscription operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) WatchStaleStakesForbiddenUpdate(opts *bind.WatchOpts, sink chan<- *ContractZrTaskManagerStaleStakesForbiddenUpdate) (event.Subscription, error) {

	logs, sub, err := _ContractZrTaskManager.contract.WatchLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractZrTaskManagerStaleStakesForbiddenUpdate)
				if err := _ContractZrTaskManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaleStakesForbiddenUpdate is a log parse operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) ParseStaleStakesForbiddenUpdate(log types.Log) (*ContractZrTaskManagerStaleStakesForbiddenUpdate, error) {
	event := new(ContractZrTaskManagerStaleStakesForbiddenUpdate)
	if err := _ContractZrTaskManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractZrTaskManagerTaskChallengedSuccessfullyIterator is returned from FilterTaskChallengedSuccessfully and is used to iterate over the raw logs and unpacked data for TaskChallengedSuccessfully events raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerTaskChallengedSuccessfullyIterator struct {
	Event *ContractZrTaskManagerTaskChallengedSuccessfully // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractZrTaskManagerTaskChallengedSuccessfullyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractZrTaskManagerTaskChallengedSuccessfully)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractZrTaskManagerTaskChallengedSuccessfully)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractZrTaskManagerTaskChallengedSuccessfullyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractZrTaskManagerTaskChallengedSuccessfullyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractZrTaskManagerTaskChallengedSuccessfully represents a TaskChallengedSuccessfully event raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerTaskChallengedSuccessfully struct {
	TaskId     uint32
	Challenger common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTaskChallengedSuccessfully is a free log retrieval operation binding the contract event 0xc20d1bb0f1623680306b83d4ff4bb99a2beb9d86d97832f3ca40fd13a29df1ec.
//
// Solidity: event TaskChallengedSuccessfully(uint32 indexed taskId, address indexed challenger)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) FilterTaskChallengedSuccessfully(opts *bind.FilterOpts, taskId []uint32, challenger []common.Address) (*ContractZrTaskManagerTaskChallengedSuccessfullyIterator, error) {

	var taskIdRule []interface{}
	for _, taskIdItem := range taskId {
		taskIdRule = append(taskIdRule, taskIdItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _ContractZrTaskManager.contract.FilterLogs(opts, "TaskChallengedSuccessfully", taskIdRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ContractZrTaskManagerTaskChallengedSuccessfullyIterator{contract: _ContractZrTaskManager.contract, event: "TaskChallengedSuccessfully", logs: logs, sub: sub}, nil
}

// WatchTaskChallengedSuccessfully is a free log subscription operation binding the contract event 0xc20d1bb0f1623680306b83d4ff4bb99a2beb9d86d97832f3ca40fd13a29df1ec.
//
// Solidity: event TaskChallengedSuccessfully(uint32 indexed taskId, address indexed challenger)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) WatchTaskChallengedSuccessfully(opts *bind.WatchOpts, sink chan<- *ContractZrTaskManagerTaskChallengedSuccessfully, taskId []uint32, challenger []common.Address) (event.Subscription, error) {

	var taskIdRule []interface{}
	for _, taskIdItem := range taskId {
		taskIdRule = append(taskIdRule, taskIdItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _ContractZrTaskManager.contract.WatchLogs(opts, "TaskChallengedSuccessfully", taskIdRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractZrTaskManagerTaskChallengedSuccessfully)
				if err := _ContractZrTaskManager.contract.UnpackLog(event, "TaskChallengedSuccessfully", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskChallengedSuccessfully is a log parse operation binding the contract event 0xc20d1bb0f1623680306b83d4ff4bb99a2beb9d86d97832f3ca40fd13a29df1ec.
//
// Solidity: event TaskChallengedSuccessfully(uint32 indexed taskId, address indexed challenger)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) ParseTaskChallengedSuccessfully(log types.Log) (*ContractZrTaskManagerTaskChallengedSuccessfully, error) {
	event := new(ContractZrTaskManagerTaskChallengedSuccessfully)
	if err := _ContractZrTaskManager.contract.UnpackLog(event, "TaskChallengedSuccessfully", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractZrTaskManagerTaskRespondedIterator is returned from FilterTaskResponded and is used to iterate over the raw logs and unpacked data for TaskResponded events raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerTaskRespondedIterator struct {
	Event *ContractZrTaskManagerTaskResponded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractZrTaskManagerTaskRespondedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractZrTaskManagerTaskResponded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractZrTaskManagerTaskResponded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractZrTaskManagerTaskRespondedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractZrTaskManagerTaskRespondedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractZrTaskManagerTaskResponded represents a TaskResponded event raised by the ContractZrTaskManager contract.
type ContractZrTaskManagerTaskResponded struct {
	Response ZrServiceManagerLibTaskResponse
	Metadata ZrServiceManagerLibTaskResponseMetadata
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTaskResponded is a free log retrieval operation binding the contract event 0xb3d0a4ff7bf22dfcf9cb480d1e535911448d11b47a0fa850ff82f39bf3ce3567.
//
// Solidity: event TaskResponded((uint32,string[]) response, (uint32,bytes32) metadata)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) FilterTaskResponded(opts *bind.FilterOpts) (*ContractZrTaskManagerTaskRespondedIterator, error) {

	logs, sub, err := _ContractZrTaskManager.contract.FilterLogs(opts, "TaskResponded")
	if err != nil {
		return nil, err
	}
	return &ContractZrTaskManagerTaskRespondedIterator{contract: _ContractZrTaskManager.contract, event: "TaskResponded", logs: logs, sub: sub}, nil
}

// WatchTaskResponded is a free log subscription operation binding the contract event 0xb3d0a4ff7bf22dfcf9cb480d1e535911448d11b47a0fa850ff82f39bf3ce3567.
//
// Solidity: event TaskResponded((uint32,string[]) response, (uint32,bytes32) metadata)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) WatchTaskResponded(opts *bind.WatchOpts, sink chan<- *ContractZrTaskManagerTaskResponded) (event.Subscription, error) {

	logs, sub, err := _ContractZrTaskManager.contract.WatchLogs(opts, "TaskResponded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractZrTaskManagerTaskResponded)
				if err := _ContractZrTaskManager.contract.UnpackLog(event, "TaskResponded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskResponded is a log parse operation binding the contract event 0xb3d0a4ff7bf22dfcf9cb480d1e535911448d11b47a0fa850ff82f39bf3ce3567.
//
// Solidity: event TaskResponded((uint32,string[]) response, (uint32,bytes32) metadata)
func (_ContractZrTaskManager *ContractZrTaskManagerFilterer) ParseTaskResponded(log types.Log) (*ContractZrTaskManagerTaskResponded, error) {
	event := new(ContractZrTaskManagerTaskResponded)
	if err := _ContractZrTaskManager.contract.UnpackLog(event, "TaskResponded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
